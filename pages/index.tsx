import { ConnectButton } from '@rainbow-me/rainbowkit';
import type { NextPage } from 'next';
import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useCallback, useEffect, useState } from 'react';
import { toast } from 'react-toastify';
import { useAccount, useSignMessage } from 'wagmi';
import { initMonitorWebSocket } from '../components/Monitor';

const Home: NextPage = () => {
  const account = useAccount()
  const { signMessage } = useSignMessage()
  const [authenticated, setAuthenticated] = useState(false)
  const onConnectWallet = useCallback(async () => {
    const token = localStorage.getItem('token')
    if (!token && account?.isConnected) {
      console.log('connected wallet', account?.address);
      
      requestNonce()
    } else {
      setAuthenticated(true)
    }
  }, [account.isConnected])
  useEffect(() => {
    if (account.isConnected) {
      onConnectWallet()
    }
  }, [account.isConnected, onConnectWallet])

  const requestNonce = async () => {
    try {
      const response = await fetch('/api/login?request=nonce');
      const data = await response.json();
      console.log(data);
      setTimeout(() => {
        handleSignMessage(data.nonce)
      }, 500);
    } catch (error) {
      console.log('error on api request', error);
    }
  }
  const handleSignMessage = async (nonce: string) => {
    try {
      signMessage(
        {
          message: nonce,
        },
        {
          onSuccess: (data) => {
            console.log('signed message', data)
            onSendSignature(data, nonce)
          },
          onError: (error) => {
            console.log('error signing message', error)
          },
        }
      )
    } catch (error) {
      console.log('error signing message', error);
    }
  };
  const onSendSignature = async (data: any, nonce: string) => {
    try {
      console.log('onSendSignature', data, nonce);
      
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          method: 'signature',
          address: account?.address,
          signature: data, 
          nonce 
        }),
      });
      const json = await response.json();
      console.log(json);
      localStorage.setItem('token', json.token);
      toast.success('Wallet authenticated successfully');
    } catch (error) {
      console.log('error on api request', error);
    }
  }
  // const handleSignatureSend = async () => {
  //   try {
  //     const data = {
  //       message: 'This is a POST request',
  //     }
  //     const response2 = await fetch('/api/login', {
  //       method: 'POST',
  //       headers: {
  //         'Content-Type': 'application/json',
  //       },
  //       body: JSON.stringify(data),
  //     })
  //     const json = await response2.json()
  //     console.log('post info ' , json);
  //     toast.success('Post request success');
  //   } catch (error) {
  //     console.log('error on api request', error);
  //   }
  // }
  const startMonitor = async () => {
    try {
      const response = await initMonitorWebSocket()
      console.log(response);
    } catch (error) {
      console.log('error on api request', error);
    }
  }
  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <h1 className={styles.title}>
          Wallet Secure Login
        </h1>

        <p className={styles.description}>
          {"Let's learn how to build a secure Web3 login system"}
        </p>

        {authenticated && <p className={styles.description}>
          {`Your account ${account.address} is authenticated: great! Now you can access the app's features.`}
        </p>}
        <button onClick={startMonitor} className={styles.card}>
          Init Monitor
        </button>
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Eth Bogot√° 2024 
        </a>
      </footer>
    </div>
  );
};

export default Home;
